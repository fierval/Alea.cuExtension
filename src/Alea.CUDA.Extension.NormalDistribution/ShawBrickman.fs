module Alea.CUDA.Extension.NormalDistribution.ShawBrickman

open Alea.CUDA

[<ReflectedDefinition>]
let inverseNormalCdf v =
    let P1 = 1.2533141373154822808
    let P2 = 5.1066889621115428678
    let P3 = 8.1217283420696808953
    let P4 = 6.478609976611846182
    let P5 = 2.7951801400933882501
    let P6 = 0.66364526254138709386
    let P7 = 0.08573550202628730526
    let P8 = 0.0058460183117205552962
    let P9 = 0.00020014949980131463558
    let P10 = 3.1784054957970863347e-6
    let P11 = 2.0424451498824914329e-8
    let P12 = 4.0218581361785749956e-11
    let P13 = 1.0259243358417535196e-14
    let Q1 = 1.0
    let Q2 = 4.574548279686728261
    let Q3 = 8.3390097367731850572
    let Q4 = 7.8130148358693434858
    let Q5 = 4.0712687287892113712
    let Q6 = 1.2037213955961447198
    let Q7 = 0.20007493257106482488
    let Q8 = 0.018179904683140742758
    let Q9 = 0.00086377649498937910731
    let Q10 = 0.000020082359687444181104
    let Q11 = 2.0563457281652766307e-7
    let Q12 = 7.6592682221644671397e-10
    let Q13 = 6.6234512664266726236e-13
    
    let sgn = if v >= 0.5 then 1 else -1
    let vv = if sgn = -1 then v else 1.0 - v
    let z = -log(2.0 * vv)

    let num = (P1+z*(P2+z*(P3+z*(P4+z*(P5+z*(P6+z*(P7+z*(P8+z*(P9+z*(P10+z*(P11+z*(P12+P13*z))))))))))))
    let den = (Q1+z*(Q2+z*(Q3+z*(Q4+z*(Q5+z*(Q6+z*(Q7+z*(Q8+z*(Q9+z*(Q10+z*(Q11+z*(Q12+Q13*z))))))))))))
    
    float(sgn) * z * num / den

